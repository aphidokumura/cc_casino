-- Casino Admin Panel with Pagination (Rednet ID 8166)
local monitor = peripheral.wrap("top")
local modem = peripheral.wrap("bottom")
rednet.open("bottom")

local ACCOUNTS_ID = 8166
local players = {}
local selectedPlayer = nil
local currentPage = 1
local perPage = 12
local scroll = 0
local logs = {}
local balance = 0

-- === Helpers ===

local function loadPlayerList()
    players = {}
    for _, name in ipairs(fs.list("/accounts")) do
        if name:match("%.txt$") and not name:match("logs") then
            table.insert(players, name:gsub("%.txt$", ""))
        end
    end
    table.sort(players)
end

local function requestBalance(player)
    rednet.send(ACCOUNTS_ID, {action="get_balance", player=player}, "casino")
    local id, res = rednet.receive("casino", 2)
    if id == ACCOUNTS_ID and res and res.balance then
        balance = res.balance
    else
        balance = 0
    end
end

local function requestLogs(player)
    rednet.send(ACCOUNTS_ID, {action="get_logs", player=player}, "casino")
    local id, res = rednet.receive("casino", 2)
    if id == ACCOUNTS_ID and res and res.logs then
        logs = res.logs
    else
        logs = {}
    end
end

local function sendAdjustment(player, delta)
    rednet.send(ACCOUNTS_ID, {
        action = "transfer",
        player = player,
        delta = delta,
        note = "Admin Panel"
    }, "casino")
    local id, res = rednet.receive("casino", 2)
    if id == ACCOUNTS_ID and res and res.balance then
        balance = res.balance
    end
    requestLogs(player)
end

-- === Drawing ===

local function drawMain()
    monitor.clear()
    monitor.setCursorPos(2, 1)
    monitor.write("== Casino Admin Panel ==")

    local totalPages = math.max(1, math.ceil(#players / perPage))
    local startIndex = (currentPage - 1) * perPage

    for i = 1, perPage do
        local idx = startIndex + i
        local player = players[idx]
        if player then
            monitor.setCursorPos(2, i + 2)
            monitor.write((player == selectedPlayer and "-> " or "   ") .. player)
        end
    end

    monitor.setCursorPos(2, 17)
    monitor.write(string.format("Page %d/%d [Prev] [Next]", currentPage, totalPages))
end

local function drawPlayerView()
    monitor.clear()
    monitor.setCursorPos(2, 1)
    monitor.write("Player: " .. selectedPlayer)
    monitor.setCursorPos(2, 2)
    monitor.write("Balance: $" .. balance)
    monitor.setCursorPos(2, 3)
    monitor.write("[+100] [-100] [+1000] [-1000] [Back]")

    monitor.setCursorPos(2, 5)
    monitor.write("Recent Transactions:")

    for i = 1, 10 do
        local entry = logs[i + scroll]
        if entry then
            monitor.setCursorPos(2, i + 5)
            monitor.write(entry:sub(1, 40))
        end
    end

    monitor.setCursorPos(38, 6)
    monitor.write("^")
    monitor.setCursorPos(38, 15)
    monitor.write("v")
end

-- === Touch Handling ===

local function handleMainTouch(x, y)
    local startIndex = (currentPage - 1) * perPage
    if y >= 3 and y <= 3 + perPage - 1 then
        local index = startIndex + (y - 3 + 1)
        local player = players[index]
        if player then
            selectedPlayer = player
            requestBalance(player)
            requestLogs(player)
            scroll = 0
        end
    elseif y == 17 then
        if x >= 9 and x <= 14 then
            if currentPage > 1 then
                currentPage = currentPage - 1
            end
        elseif x >= 17 and x <= 22 then
            local maxPages = math.ceil(#players / perPage)
            if currentPage < maxPages then
                currentPage = currentPage + 1
            end
        end
    end
end

local function handlePlayerTouch(x, y)
    if y == 3 then
        if x >= 2 and x <= 6 then sendAdjustment(selectedPlayer, 100)
        elseif x >= 8 and x <= 13 then sendAdjustment(selectedPlayer, -100)
        elseif x >= 15 and x <= 21 then sendAdjustment(selectedPlayer, 1000)
        elseif x >= 23 and x <= 30 then sendAdjustment(selectedPlayer, -1000)
        elseif x >= 32 and x <= 37 then
            selectedPlayer = nil
            scroll = 0
        end
    elseif y == 6 and x >= 38 then
        scroll = math.max(0, scroll - 1)
    elseif y == 15 and x >= 38 then
        if #logs > scroll + 10 then
            scroll = scroll + 1
        end
    end
end

-- === Startup ===

monitor.setTextScale(0.5)
loadPlayerList()

while true do
    if selectedPlayer then
        drawPlayerView()
    else
        drawMain()
    end

    local e = {os.pullEvent()}
    if e[1] == "monitor_touch" then
        local x, y = e[3], e[4]
        if selectedPlayer then
            handlePlayerTouch(x, y)
        else
            handleMainTouch(x, y)
        end
    end
end
